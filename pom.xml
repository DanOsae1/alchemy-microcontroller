<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.osaebros</groupId>
    <artifactId>alchemy-microcontroller</artifactId>
    <version>1.0-SNAPSHOT</version>

    <name>alchemy-microcontroller</name>
    <url>http://maven.apache.org</url>

    <repositories>
        <repository>
            <id>oss.sonatype.org-snapshot</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
            <releases>
                <enabled>false</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <launcher.class>com.osaebros/com.osaebros.App</launcher.class>

        <!-- Set up for pi vars -->
        <pi.hostname>osaebros</pi.hostname>
        <pi.ipnumber>192.168.4.88</pi.ipnumber>  <!-- change to concrete ip-number if hostname is not unique in wlan -->
        <!--        <pi.ipnumber>${pi.hostname}.local</pi.ipnumber>  &lt;!&ndash; change to concrete ip-number if hostname is not unique in wlan &ndash;&gt;-->
        <pi.port>22</pi.port>
        <pi.username>daniel</pi.username>
        <pi.password>admin</pi.password>
        <pi.deploydirectory>/home/daniel/app</pi.deploydirectory>
        <pi.jvmOptions/>

        <!-- If a mouse is attached to Pi use 'true' -->
        <pi.drm.enable.cursor>true</pi.drm.enable.cursor>

        <!-- Java Compiler Version -->
        <java.version>17</java.version>

        <!-- Project Dependency Versions-->
        <javafx.version>21.0.1</javafx.version>
        <pi4j.version>2.6.1</pi4j.version>
        <junit.version>5.10.0</junit.version>

        <!-- Plugin Versions-->
        <javafx.plugin.version>0.0.8</javafx.plugin.version>

        <!-- Maven Plugin Versions -->
        <maven-clean-plugin.version>3.3.1</maven-clean-plugin.version>
        <maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
        <maven-dependency-plugin.version>3.6.1</maven-dependency-plugin.version>
        <exec-maven-plugin.version>3.1.0</exec-maven-plugin.version>
        <maven-install-plugin.version>3.1.1</maven-install-plugin.version>
        <maven-jar-plugin.version>3.3.0</maven-jar-plugin.version>
        <maven-javadoc-plugin.version>3.6.0</maven-javadoc-plugin.version>
        <maven-resources-plugin.version>3.3.1</maven-resources-plugin.version>
        <maven-surefire-plugin.version>3.2.1</maven-surefire-plugin.version>
        <maven-antrun-plugin.version>3.1.0</maven-antrun-plugin.version>
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
        <maven-jar-plugin.version>3.1.0</maven-jar-plugin.version>
        <maven-shade-plugin.version>3.2.4</maven-shade-plugin.version>

        <!-- Maven Properties -->
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>

        <!-- PROJECT ENCODING PROPERTIES -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- Dependencies -->
        <ant-jsch.version>1.10.15</ant-jsch.version>
        <jackson.version>2.17.2</jackson.version>
        <netty.version>4.1.113.Final</netty.version>
        <logback.version>1.4.11</logback.version>

    </properties>


    <dependencies>

        <!--Logging -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>

        <!-- Server -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>${jackson.version}</version>
        </dependency>

        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
            <version>${netty.version}</version>
            <scope>compile</scope>
        </dependency>
        <!--/Server -->

        <!-- JavaFX  -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-base</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-web</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <!--/ JAVA FX-->

        <!-- Pi4J  -->
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-core</artifactId>
            <version>${pi4j.version}</version>
        </dependency>

        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-raspberrypi</artifactId>
            <version>${pi4j.version}</version>
        </dependency>

        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-pigpio</artifactId>
            <version>${pi4j.version}</version>
        </dependency>

        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-linuxfs</artifactId>
            <version>${pi4j.version}</version>
        </dependency>

        <!-- Pi4J Mock Platform -->
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-mock</artifactId>
            <version>${pi4j.version}</version>
            <!-- <scope>test</scope> -->
        </dependency>

        <!-- JUnit -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <finalName>alchemy-fatjar</finalName>
        <plugins>

            <!--Fat Jar -->

            <!--
            https://maven.apache.org/plugins/maven-shade-plugin/
            This plugin provides the capability to package the artifact in an uber-jar, including its dependencies and
            to shade - i.e. rename - the packages of some of the dependencies. The transformer will combine the files
            in the META-INF.services directories of multiple Pi4J plugins with the same package name into one file.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>${maven-shade-plugin.version}</version>
                <configuration>
                    <transformers>
                        <transformer
                                implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                    </transformers>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- JAVA FX -->
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>${javafx.plugin.version}</version>
                <configuration>
                    <mainClass>${launcher.class}</mainClass>
                </configuration>
            </plugin>

            <!-- JAVA COMPILER -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <release>${java.version}</release>
                    <showDeprecation>true</showDeprecation>
                    <showWarnings>true</showWarnings>
                    <verbose>false</verbose>
                </configuration>
            </plugin>

            <!-- DEFAULT JAR EXECUTABLE CLASS -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${exec-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>java</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <executable>java</executable>
                    <arguments>
                        <argument>--module-path</argument>
                        <argument>${project.build.directory}/distribution</argument>
                        <argument>--module</argument>
                        <argument>${launcher.class}</argument>
                    </arguments>
                </configuration>
            </plugin>
            <!-- Copy runtime dependencies into distribution folder -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/distribution</outputDirectory>
                            <includeScope>runtime</includeScope>
                            <excludeTransitive>false</excludeTransitive>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>true</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <!--
                            On the Raspberry Pi we use specific JavaFX dependencies, so we exclude them here.
                            -->
                            <excludeGroupIds>org.openjfx</excludeGroupIds>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Build final JAR file -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <outputDirectory>${project.build.directory}/distribution</outputDirectory>
                </configuration>
            </plugin>

            <!-- Javadoc -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <configuration>
                    <additionalOptions>
                        <additionalOption>--module-path</additionalOption>
                        <additionalOption>${project.build.directory}/distribution</additionalOption>
                    </additionalOptions>
                </configuration>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${maven-clean-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>${maven-antrun-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${maven-dependency-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${maven-jar-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${maven-install-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${maven-javadoc-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven-resources-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>${exec-maven-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>${maven-shade-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${maven-jar-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-shade-plugin</artifactId>
                    <version>${maven-shade-plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <profiles>
        <profile>
            <id>jfx-remote-run-kiosk</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>transfer</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!-- Ensure target directory exists on RaspPi -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}"
                                                 trust="true"
                                                 command="mkdir --parents ${pi.deploydirectory}; rm -f ${pi.deploydirectory}/*.jar"/>

                                        <!-- Transfer distribution folder to RaspPi via SCP -->
                                        <scp trust="true"
                                             todir="${pi.username}:${pi.password}@${pi.ipnumber}:${pi.deploydirectory}"
                                             port="${pi.port}">
                                            <fileset dir="${project.build.directory}/distribution">
                                                <exclude name="javafx*.jar"/>/>
                                            </fileset>
                                        </scp>

                                        <!-- Stop all running Java processes -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="false"
                                                 suppresssystemerr="true" suppresssystemout="true"
                                                 command="sudo killall -9 java"/>

                                        <!-- Run JFX application on Raspberry Pi -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="true"
                                                 command="sudo  java-kiosk  ${pi.jvmOptions} -Xmx1G --module-path ${pi.deploydirectory} --module ${launcher.class} -Dmonocle.cursor.enabled=${pi.drm.enable.cursor}"/>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.ant</groupId>
                                <artifactId>ant-jsch</artifactId>
                                <version>${ant-jsch.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>jfx-remote-run-X11</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>transfer</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!-- Stop all running Java processes -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="false"
                                                 suppresssystemerr="true" suppresssystemout="true"
                                                 command="sudo killall -9 java"/>

                                        <!-- Ensure target directory exists on RaspPi -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}"
                                                 trust="true"
                                                 command="mkdir --parents ${pi.deploydirectory}; rm -f ${pi.deploydirectory}/*"/>

                                        <!-- Transfer distribution folder to RaspPi via SCP -->
                                        <scp trust="true"
                                             todir="${pi.username}:${pi.password}@${pi.ipnumber}:${pi.deploydirectory}"
                                             port="${pi.port}">
                                            <fileset dir="${project.build.directory}/distribution">
                                                <exclude name="javafx*.jar"/>/>
                                            </fileset>
                                        </scp>

                                        <!-- Run JFX application on Raspberry Pi -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="true"
                                                 command="DISPLAY=:0 XAUTHORITY=/home/daniel/.Xauthority sudo -E java -XX:+UseZGC -Xmx1G  ${pi.jvmOptions} --module-path /usr/share/openjfx/lib:${pi.deploydirectory} --add-modules javafx.controls -Dglass.platform=gtk --module ${launcher.class}"/>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>com.github.mwiede</groupId>
                                <artifactId>jsch</artifactId>
                                <version>0.2.19</version>
                            </dependency>
                            <dependency>
                                <groupId>org.apache.ant</groupId>
                                <artifactId>ant-jsch</artifactId>
                                <version>${ant-jsch.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- Activate JDWP server on Pi, can be used for local and remote runs -->
        <profile>
            <id>debug</id>
            <properties>
                <pi.jvmOptions>
                    -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005
                </pi.jvmOptions>
            </properties>
        </profile>
    </profiles>
</project>
